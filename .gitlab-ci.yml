stages:
  - lint
  - setup
  - build
  - test
  - publish

variables:
  DATA_REPLAY_TAG: data-cache-storage

include:
  - local: scripts/ci-helpers/includes.gitlab-ci.yml

############ Templates ############

.lint_job:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    name: lint-results
    when: always
  tags:
    - public-runner-docker

.docker-build-template:
  extends: .docker_image_builder_job_template
  stage: build
  variables:
    BASE_REPO_NAME: base
    BASE_TAG: ubuntu-22.04-1
    NAME: ""
    TARGET: "$NAME-base"
  before_script:
    - !reference [.docker_image_builder_job_template, before_script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      echo -e "\e[0Ksection_end:$(date +%s):tag\r\e[0K"
      echo -e "\e[0Ksection_start:$(date +%s):build[collapsed=true]\r\e[0KBaking $NAME${BASE_REPO_NAME:+/$BASE_REPO_NAME} image..."
      function image-exists() {
        local image=$1
        docker manifest inspect "$1" > /dev/null
        return $?
      }
      if image-exists "$CI_REGISTRY_IMAGE${NAME:+/$NAME}${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG"; then
        echo "Image $CI_REGISTRY_IMAGE${NAME:+/$NAME}${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG already exists. Skipping build..."
        if [[ -n "$CI_COMMIT_TAG" && "$TARGET" == "full-ci" ]]; then
          echo "Tagging pre-existing image with Git tag..."
          docker pull "$CI_REGISTRY_IMAGE${NAME:+/$NAME}${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG"
          docker tag "$CI_REGISTRY_IMAGE${NAME:+/$NAME}${BASE_REPO_NAME:+/$BASE_REPO_NAME}:$BASE_TAG" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
          docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
        fi
      else
        echo "Baking $CI_REGISTRY_IMAGE${NAME:+/$NAME}${BASE_REPO_NAME:+/$BASE_REPO_NAME} base image..."
        git config --global --add safe.directory $(pwd)
        scripts/build_docker_image.sh "$CI_PROJECT_DIR"
      fi
      echo -e "\e[0Ksection_end:$(date +%s):build\r\e[0K"
  tags:
    - public-runner-docker
    - hived-for-tests

############ End templates ############

############ Setup ############

lint_bash_scripts:
  extends: .lint_job
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk add xmlstarlet
  script:
    - find . -name .git -type d -prune -o -type f -name \*.sh -exec shellcheck -f checkstyle {} + | tee shellcheck-checkstyle-result.xml
  after_script:
    - xmlstarlet tr misc/checkstyle2junit.xslt shellcheck-checkstyle-result.xml > shellcheck-junit-result.xml
  artifacts:
    paths: 
      - shellcheck-checkstyle-result.xml
      - shellcheck-junit-result.xml
    reports:
      junit: shellcheck-junit-result.xml

lint_sql_scripts:
  extends: .lint_job
  image: 
    name: sqlfluff/sqlfluff:2.1.4
    entrypoint: [""]
  script:
    - sqlfluff lint --format yaml --write-output sql-lint.yaml
  artifacts:
    paths:
      - sql-lint.yaml

determine-runner-tag:
  extends: .determine-runner-tag-template
  stage: setup

############ End setup ############

############ Build ############

prepare_haf_image:
  stage: build
  extends: .prepare_haf_image
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/haf"
    REGISTRY_USER: "$HAF_DEPLOY_USERNAME"
    REGISTRY_PASS: "$HAF_DEPLOY_TOKEN"
  before_script:
    - git config --global --add safe.directory $CI_PROJECT_DIR/haf
  tags:
    - public-runner-docker
    - hived-for-tests

docker-ci-runner-build:
  extends: .docker-build-template
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: "docker-24.0.1-7"
    NAME: "ci-runner"
    TARGET: "ci-runner-ci"

docker-psql-client-build:
  extends: .docker-build-template
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: "14"
    NAME: "psql-client"
    TARGET: "psql-client-ci"

docker-setup-and-processing-build:
  extends: .docker-build-template
  needs:
    - docker-psql-client-build
  variables:
    BASE_REPO_NAME: ""
    BASE_TAG: "$CI_COMMIT_SHORT_SHA"
    NAME: ""
    TARGET: "full-ci"

############ End build ############

############ Test ############

dynamic-tag-pipeline-trigger:
  extends: .dynamic-tag-pipeline-trigger-template
  stage: test
  needs:
    - job: determine-runner-tag
    - job: prepare_haf_image
    - job: docker-ci-runner-build
      artifacts: false
    - job: docker-psql-client-build
      artifacts: false
    - job: docker-setup-and-processing-build
      artifacts: false
  trigger:
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: true
    include:
      - local: scripts/ci-helpers/dynamic-tag-pipeline.gitlab-ci.yml

dynamic-pipeline-details-collector:
  extends: .dynamic-pipeline-details-collector-template
  stage: test
  needs:
    - job: dynamic-tag-pipeline-trigger
  tags:
    - public-runner-docker

dynamic-pipeline-test-results-collector:
  extends: .dynamic-pipeline-test-results-collector-template
  stage: test
  needs:
    - job: dynamic-pipeline-details-collector
  parallel:
    matrix:
      - CHILD_PIPELINE_JOB: [ 
          "full-image-performance-test",
          "psql-client-performance-test"
        ]
  tags:
    - public-runner-docker

############ End test ############

############ Publish ############

build_and_publish_image:
  stage: publish
  extends: .publish_docker_image_template
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

############ End publish ############
